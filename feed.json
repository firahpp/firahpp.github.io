{
    "version": "https://jsonfeed.org/version/1",
    "title": "Firah&#x27;s blog",
    "description": "",
    "home_page_url": "https://firah.id",
    "feed_url": "https://firah.id/feed.json",
    "user_comment": "",
    "icon": "https://firah.id/media/website/IMG-20180130-WA0033_square.jpg",
    "author": {
        "name": "Firah Putri"
    },
    "items": [
        {
            "id": "https://firah.id/antrian-pada-strukturdata-byfirah.html",
            "url": "https://firah.id/antrian-pada-strukturdata-byfirah.html",
            "title": "Antrian (Queue) pada Struktur Data",
            "summary": "Halo semuanya!!! hari ini aku bakalan ngebahas salah satu materi Struktur Data. coba perhatikan ilustrasi gambar dibawah. dilihat dari gambar di atas kalian pasti tau kan maksudnya apa? yups. Antrian. Kalian pasti tau kan kalau kita ngantri siapa duluan yang akan dipanggil? orang pertama yang&hellip;",
            "content_html": "<p>Halo semuanya!!!</p>\n<p>hari ini aku bakalan ngebahas salah satu materi Struktur Data. </p>\n<p>coba perhatikan ilustrasi gambar dibawah.</p>\n<p><img class=\"post__image\" src=\"https://firah.id/media/posts/4/pemodelan-pada-sistem-antrian.jpg\" alt=\"\" width=\"339\" height=\"254\"></p>\n<p>dilihat dari gambar di atas kalian pasti tau kan maksudnya apa? yups. Antrian. Kalian pasti tau kan kalau kita ngantri siapa duluan yang akan dipanggil? orang pertama yang mengantri dong ya pastinya. terus gimana hubungan nya dengan materi kuliah Struktur Data? kita bahas mulai dari pengertian nya dulu ya.</p>\n<p> <strong>Pengertian Queue</strong></p>\n<p><span class=\"tr\">Queue/antrian adalah ordered list dengan penyisipan di satu ujung, sedang penghapusan di ujung lain.</span><span class=\"tr\">Ujung penyisipan disebut rear/tail.</span><span class=\"tr\">Ujung penghapusan disebut front/head.</span><span class=\"tr\">Head/front menunjuk ke awal antrian(elemen terdepan), sedangkan tail/rear menunjuk ke akhir antrian (elemen paling belakang).</span><span class=\"tr\">Bersifat FIFO (First In First Out) yaitu Elemen yang pertama kali masuk ke antrian akan keluar pertama kalinya.</span></p>\n<p> <strong>Operasi Queue Create : membuat queue baru yang masih kosong</strong></p>\n<p><span class=\"tr\">EnQueue: Memasukkan/menyisipkan data baru pada tail (queue)</span><br><span class=\"tr\">DeQueue: Mengeluarkan/menghapus data terdepan/pertama dari antrian (di front), jika queue tidak kosong</span></p>\n<p><span class=\"tr\">Clear: Menghapus seluruh antrian</span></p>\n<p><span class=\"tr\">Empty/IsEmpty: Memeriksa apakah antrian kosong(mengembalikan nilai true jika queue kosong)</span></p>\n<p><span class=\"tr\">Full/IsFull: Memeriksa apakah antrian penuh (mengembalikan nilai true jika queue penuh)</span></p>\n<p><span class=\"tr\">getfront: mengambil data pertama (di front), jika queue tidak kosong.</span><br><br></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><strong>Operasi Queue dengan Array</strong><br><span class=\"tr\">Create</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Empty</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Enqueue</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Full</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Dequeue</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">getfront</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><strong>Queue Linier Array</strong></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Terdapat satu buah pintu masuk di suatu ujung dan satu buah pintu keluar di ujung satunya. </span><span class=\"tr\">Sehingga membutuhkan 2 variabel: Head dan Tail</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><strong>Deklarasi Queue Operasi-operasi: Create()</strong><br><span class=\"tr\">Untuk menciptakan dan menginisialisasi Queue</span><span class=\"tr\">Dengan cara membuat Head dan Tail = -1</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \">Create() </p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><strong>IsEmpty() Untuk memeriksa apakah Antrian sudah penuh atau belum</strong><br><span class=\"tr\">Dengan cara memeriksa nilai Tail, jika Tail = -1 maka empty</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Kita tidak memeriksa Head, karena Head adalah tanda untuk kepala antrian (elemen pertama dalam antrian) yang tidak akan berubah-ubah. </span><span class=\"tr\">Pergerakan pada Antrian terjadi dengan penambahan elemen Antrian kebelakang, yaitu menggunakan nilai Tail</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><strong>IsFull() Untuk mengecek apakah Antrian sudah penuh atau belum</strong><br><span class=\"tr\">Dengan cara mengecek nilai Tail, jika Tail &gt;= MAX-1 (karena MAX-1 adalah batas elemen array) berarti sudah penuh</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><strong>Enqueue()</strong></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Untuk menambahkan elemen ke dalam Antrian, penambahan elemen selalu ditambahkan di elemen paling belakang</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Penambahan elemen selalu menggerakan variabel Tail dengan cara increment counter Tail terlebih dahulu</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><strong>Dequeue()</strong></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Digunakan untuk menghapus elemen terdepan/pertama (head) dari Antrian d</span><span class=\"tr\">engan cara menggeser semua elemen antrian kedepan dan mengurangi Tail dgn 1 atau bisa menambah head dgn 1</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \">Clear()</p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Untuk menghapus elemen-elemen Antrian dengan cara membuat Tail dan Head = -1</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><span class=\"tr\">Penghapusan elemen-elemen Antrian sebenarnya tidak menghapus arraynya, namun hanya mengeset indeks pengaksesan-nya ke nilai -1 sehingga elemen-elemen Antrian tidak lagi terbaca</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><strong>Tampil() Untuk menampilkan nilai-nilai elemen Antrian</strong><br><span class=\"tr\">Menggunakan looping dari head s/d tail</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><strong>Queue dengan Array #include&lt;iostream.h&gt; #include&lt;conio.h&gt;</strong><br><span class=\"tr\">#include&lt;stdlib.h&gt;</span><span class=\"tr\">#define MAX 10 //ukuran maksimum queue</span><span class=\"tr\">void enqueue(int queue[], int *tail, int nilai);</span><span class=\"tr\">void dequeue(int queue[], int *head, int *tail, int *nilai);</span><span class=\"tr\">int main()</span>{<span class=\"tr\">int queue[MAX];</span><span class=\"tr\">int head, tail;</span><span class=\"tr\">int n, nilai;</span><span class=\"tr\">head = tail = (-1);</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \">do {<span class=\"tr\">cout&lt;&lt;\"Masukkan Nilai Elemen : \";</span><span class=\"tr\">cin&gt;&gt;nilai;</span><span class=\"tr\">enqueue(queue,&amp;tail,nilai);</span><span class=\"tr\">cout&lt;&lt;endl;</span><span class=\"tr\">cout&lt;&lt;\"Tekan 1 untuk Melanjutkan\"&lt;&lt;endl;</span><span class=\"tr\">cin&gt;&gt;n;</span><span class=\"tr\">} while (n == 1);</span><span class=\"tr\">cout&lt;&lt;\"Tekan 1 untuk Menghapus Sebuah Elemen\"&lt;&lt;endl;</span></p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \">while(n == 1) { dequeue(queue,&amp;head,&amp;tail,&amp;nilai); cout&lt;&lt;\"Nilai telah dihapus : \"&lt;&lt;nilai&lt;&lt;endl; cout&lt;&lt;endl; cout&lt;&lt;\"Tekan 1 untuk Menghapus Sebuah Elemen : \"; cin&gt;&gt;n; } cout&lt;&lt;\"Tekan 1 untuk Melanjutkan\"&lt;&lt;endl; } while (n == 1); getch(); return 0; </p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \">void enqueue(int queue[], int *tail, int nilai) { if(*tail &lt; MAX-1) *tail = *tail + 1; queue[*tail] = nilai; } else cout&lt;&lt;\"Queue Penuh, enqueue Tidak Dapat Dilakukan\"&lt;&lt;endl; exit(0); </p>\n<p class=\"uk-text-justify uk-nbfc uk-margin \"><strong>void dequeue(int queue[], int. head, int. tail, int. nilai) { if(</strong><br><span class=\"tr\">void dequeue(int queue[], int *head, int *tail, int *nilai) { if(*head == *tail) cout&lt;&lt;\"Queue Kosong, dequeue Tidak Dapat Dilakukan\"&lt;&lt;endl; exit(0); } else *head = *head + 1; *nilai = queue[*head];</span></p>\n<p><img class=\"post__image\" src=\"https://firah.id/media/posts/4/img11.jpg\" alt=\"Tampilan Program\" width=\"568\" height=\"287\"></p>",
            "image": "https://firah.id/media/posts/4/computer-screen-code-program.jpg",
            "author": {
                "name": "Firah Putri"
            },
            "tags": [
            ],
            "date_published": "2019-07-21T13:20:43+07:00",
            "date_modified": "2019-07-22T14:50:55+07:00"
        },
        {
            "id": "https://firah.id/intro.html",
            "url": "https://firah.id/intro.html",
            "title": "Intro",
            "summary": "Halo! Namaku Firah Putri Pratiwi, Aku adalah Mahasiswa Teknik Informatika tingkat 1. Mempunyai blog pribadi adalah salah satu keinginanku dari dulu, dan syukurlah sekarang bisa tercapai keinginan itu. karena ini blog pribadiku, jadi aku akan nulis disini berdasarkan apa yang aku suka dan yang aku&hellip;",
            "content_html": "<p>Halo! Namaku Firah Putri Pratiwi, Aku adalah Mahasiswa Teknik Informatika tingkat 1. </p>\n<p>Mempunyai blog pribadi adalah salah satu keinginanku dari dulu, dan syukurlah sekarang bisa tercapai keinginan itu.</p>\n<p>karena ini blog pribadiku, jadi aku akan nulis disini berdasarkan apa yang aku suka dan yang aku inginkan.</p>\n<p>Aku punya banyak cita-cita. salah satunya adalah menjadi penulis buku yang disukai banyak orang, oleh karena itu mohon bantuannya ya semua!! ^^</p>",
            "image": "https://firah.id/media/posts/2/Pricing-header-banner.jpg",
            "author": {
                "name": "Firah Putri"
            },
            "tags": [
            ],
            "date_published": "2019-07-04T06:44:46+07:00",
            "date_modified": "2019-07-04T06:45:34+07:00"
        }
    ]
}
